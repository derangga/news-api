// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	request "newsapi/internal/model/request"
	response "newsapi/internal/model/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsersUsecase is a mock of UsersUsecase interface.
type MockUsersUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsersUsecaseMockRecorder
}

// MockUsersUsecaseMockRecorder is the mock recorder for MockUsersUsecase.
type MockUsersUsecaseMockRecorder struct {
	mock *MockUsersUsecase
}

// NewMockUsersUsecase creates a new mock instance.
func NewMockUsersUsecase(ctrl *gomock.Controller) *MockUsersUsecase {
	mock := &MockUsersUsecase{ctrl: ctrl}
	mock.recorder = &MockUsersUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersUsecase) EXPECT() *MockUsersUsecaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersUsecase) CreateUser(ctx context.Context, body request.CreateUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersUsecaseMockRecorder) CreateUser(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersUsecase)(nil).CreateUser), ctx, body)
}

// MockNewsUsecase is a mock of NewsUsecase interface.
type MockNewsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockNewsUsecaseMockRecorder
}

// MockNewsUsecaseMockRecorder is the mock recorder for MockNewsUsecase.
type MockNewsUsecaseMockRecorder struct {
	mock *MockNewsUsecase
}

// NewMockNewsUsecase creates a new mock instance.
func NewMockNewsUsecase(ctrl *gomock.Controller) *MockNewsUsecase {
	mock := &MockNewsUsecase{ctrl: ctrl}
	mock.recorder = &MockNewsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsUsecase) EXPECT() *MockNewsUsecaseMockRecorder {
	return m.recorder
}

// CreateNewsArticle mocks base method.
func (m *MockNewsUsecase) CreateNewsArticle(ctx context.Context, body request.CreateNewsArticleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewsArticle", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewsArticle indicates an expected call of CreateNewsArticle.
func (mr *MockNewsUsecaseMockRecorder) CreateNewsArticle(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewsArticle", reflect.TypeOf((*MockNewsUsecase)(nil).CreateNewsArticle), ctx, body)
}

// DeleteNewsArticleBySlug mocks base method.
func (m *MockNewsUsecase) DeleteNewsArticleBySlug(ctx context.Context, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNewsArticleBySlug", ctx, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNewsArticleBySlug indicates an expected call of DeleteNewsArticleBySlug.
func (mr *MockNewsUsecaseMockRecorder) DeleteNewsArticleBySlug(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNewsArticleBySlug", reflect.TypeOf((*MockNewsUsecase)(nil).DeleteNewsArticleBySlug), ctx, slug)
}

// GetNewsArticleBySlug mocks base method.
func (m *MockNewsUsecase) GetNewsArticleBySlug(ctx context.Context, slug string) (response.NewsArticleWithTopic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsArticleBySlug", ctx, slug)
	ret0, _ := ret[0].(response.NewsArticleWithTopic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsArticleBySlug indicates an expected call of GetNewsArticleBySlug.
func (mr *MockNewsUsecaseMockRecorder) GetNewsArticleBySlug(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsArticleBySlug", reflect.TypeOf((*MockNewsUsecase)(nil).GetNewsArticleBySlug), ctx, slug)
}

// GetNewsArticles mocks base method.
func (m *MockNewsUsecase) GetNewsArticles(ctx context.Context) ([]response.NewsArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsArticles", ctx)
	ret0, _ := ret[0].([]response.NewsArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsArticles indicates an expected call of GetNewsArticles.
func (mr *MockNewsUsecaseMockRecorder) GetNewsArticles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsArticles", reflect.TypeOf((*MockNewsUsecase)(nil).GetNewsArticles), ctx)
}

// UpdateNewsArticleBySlug mocks base method.
func (m *MockNewsUsecase) UpdateNewsArticleBySlug(ctx context.Context, slug string, body request.UpdateNewsArticleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNewsArticleBySlug", ctx, slug, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNewsArticleBySlug indicates an expected call of UpdateNewsArticleBySlug.
func (mr *MockNewsUsecaseMockRecorder) UpdateNewsArticleBySlug(ctx, slug, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNewsArticleBySlug", reflect.TypeOf((*MockNewsUsecase)(nil).UpdateNewsArticleBySlug), ctx, slug, body)
}

// MockTopicsUsecase is a mock of TopicsUsecase interface.
type MockTopicsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTopicsUsecaseMockRecorder
}

// MockTopicsUsecaseMockRecorder is the mock recorder for MockTopicsUsecase.
type MockTopicsUsecaseMockRecorder struct {
	mock *MockTopicsUsecase
}

// NewMockTopicsUsecase creates a new mock instance.
func NewMockTopicsUsecase(ctrl *gomock.Controller) *MockTopicsUsecase {
	mock := &MockTopicsUsecase{ctrl: ctrl}
	mock.recorder = &MockTopicsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicsUsecase) EXPECT() *MockTopicsUsecaseMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method.
func (m *MockTopicsUsecase) CreateTopic(ctx context.Context, body request.CreateTopicRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockTopicsUsecaseMockRecorder) CreateTopic(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockTopicsUsecase)(nil).CreateTopic), ctx, body)
}

// GetTopics mocks base method.
func (m *MockTopicsUsecase) GetTopics(ctx context.Context) ([]response.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopics", ctx)
	ret0, _ := ret[0].([]response.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopics indicates an expected call of GetTopics.
func (mr *MockTopicsUsecaseMockRecorder) GetTopics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopics", reflect.TypeOf((*MockTopicsUsecase)(nil).GetTopics), ctx)
}

// UpdateTopic mocks base method.
func (m *MockTopicsUsecase) UpdateTopic(ctx context.Context, body request.UpdateTopicRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopic", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTopic indicates an expected call of UpdateTopic.
func (mr *MockTopicsUsecaseMockRecorder) UpdateTopic(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopic", reflect.TypeOf((*MockTopicsUsecase)(nil).UpdateTopic), ctx, body)
}
